#!/bin/bash

# ups-version - Global CLI tool for UPS Server version management
# This script should be placed in /usr/local/bin/ and made executable
# Works both on host and inside container

set -e

# Auto-detect environment and set appropriate paths
if [ -f "/app/version_info.py" ]; then
    # Running inside container
    SCRIPT_DIR="/app"
    PYTHON_CMD="python3"
elif [ -f "./app/version_info.py" ]; then
    # Running on host in project directory
    SCRIPT_DIR="./app"
    PYTHON_CMD="python3"
elif [ -f "$(dirname $0)/../app/version_info.py" ]; then
    # Running from scripts directory
    SCRIPT_DIR="$(dirname $0)/../app"
    PYTHON_CMD="python3"
else
    # Last resort: try to find the script
    PROJECT_ROOT=$(find /opt -name "version_info.py" -path "*/app/version_info.py" 2>/dev/null | head -1 | dirname 2>/dev/null)
    if [ -n "$PROJECT_ROOT" ]; then
        SCRIPT_DIR="$PROJECT_ROOT"
        PYTHON_CMD="python3"
    else
        SCRIPT_DIR=""
    fi
fi

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Help function
show_help() {
    echo "UPS Server Docker Version Management Tool"
    echo ""
    echo "Usage: ups-version [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  info                Show detailed version information"
    echo "  string              Show just the version string"
    echo "  json                Output version information as JSON"
    echo "  freeze              Freeze current version to file"
    echo "  freeze --force-clean Freeze version and remove +dirty suffix"
    echo "  debug               Debug git status (troubleshooting dirty flags)"
    echo "  help                Show this help message"
    echo ""
    echo "Examples:"
    echo "  ups-version info"
    echo "  ups-version string"
    echo "  ups-version freeze"
    echo "  ups-version freeze --force-clean  # Remove +dirty if present"
    echo "  ups-version debug                 # Troubleshoot +dirty issues"
    echo ""
    echo "Note: This script works both on host (from project directory)"
    echo "      and inside Docker container."
}

# Check if we can access the version script
if [ -z "$SCRIPT_DIR" ] || [ ! -f "$SCRIPT_DIR/version_info.py" ]; then
    echo -e "${RED}Error: UPS Server version script not found${NC}" >&2
    echo "Searched locations:" >&2
    echo "  - /app/version_info.py (container)" >&2
    echo "  - ./app/version_info.py (host project root)" >&2
    echo "  - $(dirname $0)/../app/version_info.py (from scripts dir)" >&2
    echo "" >&2
    echo "Make sure you are running this from the project directory" >&2
    echo "or that UPS Server Docker container is properly installed." >&2
    exit 1
fi

# Show environment info for debug
if [ "$1" = "debug" ]; then
    echo -e "${BLUE}🌍 Environment Detection:${NC}"
    echo "Script directory: $SCRIPT_DIR"
    echo "Python command: $PYTHON_CMD"
    echo "Current working directory: $(pwd)"
    echo ""
fi

# Default command is info
COMMAND=${1:-info}

case "$COMMAND" in
    "info"|"")
        cd "$SCRIPT_DIR" && $PYTHON_CMD version_info.py info
        ;;
    "string")
        cd "$SCRIPT_DIR" && $PYTHON_CMD version_info.py string
        ;;
    "json")
        cd "$SCRIPT_DIR" && $PYTHON_CMD version_info.py json
        ;;
    "freeze")
        if [ "$2" = "--force-clean" ]; then
            echo -e "${YELLOW}🧹 Force cleaning version (removing +dirty suffix)...${NC}"
            cd "$SCRIPT_DIR" && $PYTHON_CMD version_info.py freeze --force-clean
        else
            cd "$SCRIPT_DIR" && $PYTHON_CMD version_info.py freeze
        fi
        ;;
    "debug")
        echo -e "${YELLOW}🔍 Running Git status debug...${NC}"
        echo "This will help troubleshoot why versions are marked as 'dirty'"
        echo ""
        cd "$SCRIPT_DIR" && $PYTHON_CMD version_info.py debug
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        echo -e "${RED}Error: Unknown command '$COMMAND'${NC}" >&2
        echo ""
        show_help
        exit 1
        ;;
esac